//  Рекурсивный обход дерева DOM: Напишите функцию, которая рекурсивно обходит дерево DOM, начиная с указанного элемента, и выполняет определенное действие с каждым узлом (например, выводить информацию о теге в консоль).

const traverseDOM = (element) => {
  //   Выведим информацию о текущем теге в консоль
  //   `element` - это параметр функции, который представляет текущий элемент, с которого начинается обход.
  console.log(element.tagName);

  // Рекурсивно вызываем функцию traverseDOM для каждого дочернего элемента
  //   `element.children` - это свойство элемента `element`, которое представляет коллекцию его дочерних элементов.
  for (let i = 0; i < element.children.length; i++) {
    traverseDOM(element.children[i]);
  }
};

// Пример использования функции
// Переменная `rootElement` представляет корневой элемент, с которого начинается обход. Мы используем метод `document.querySelector()` для нахождения этого элемента, указав его селектор ('body' в данном случае). Затем мы вызываем функцию `traverseDOM` с `rootElement`, чтобы начать обход дерева DOM.
const rootElement = document.querySelector('body');
traverseDOM(rootElement);

// Рекурсия – это приём программирования, полезный в ситуациях, когда задача может быть естественно разделена на несколько аналогичных, но более простых задач. Или когда задача может быть упрощена до несложных действий плюс простой вариант той же задачи. Или, как мы скоро увидим, для работы с определёнными структурами данных.

// В процессе выполнения задачи в теле функции могут быть вызваны другие функции для выполнения подзадач. Частный случай подвызова – когда функция вызывает сама себя. Это как раз и называется рекурсией. https://learn.javascript.ru/recursion
